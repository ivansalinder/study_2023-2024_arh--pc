%include 'in_out.asm'
SECTION .data
    msg db "Результат: ", 0
    msg1 db "Функция: f(x)=2*(x-1)", 0

SECTION .text
    global _start

_start:
    pop ecx          ; Извлекаем из стека в `ecx` количество аргументов (первое значение в стеке)
    pop edx          ; Извлекаем из стека в `edx` имя программы (второе значение в стеке)
    sub ecx, 1       ; Уменьшаем `ecx` на 1 (количество аргументов без названия программы)
    mov esi, 0       ; Используем `esi` для хранения промежуточных сумм

next:
    cmp ecx, 0h      ; проверяем, есть ли еще аргументы
    jz _end          ; если аргументов нет, выходим из цикла (переход на метку `_end`)

    pop eax          ; извлекаем следующий аргумент из стека
    call atoi        ; преобразуем символ в число
    sub eax, 1       ; вычитаем 1 из аргумента
    imul eax, 2      ; умножаем на 2

    add esi, eax     ; добавляем к промежуточной сумме
    loop next        ; переход к обработке следующего аргумента

_end:
    mov eax, msg1    ; вывод сообщения "Функция: f(x)=2*(x-1)"
    call sprintLF

    mov eax, msg      ; вывод сообщения "Результат: "
    call sprint

    mov eax, esi      ; записываем сумму в регистр `eax`
    call iprintLF     ; печать результата

    call quit         ; завершение программы

